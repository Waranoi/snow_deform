#version 450 core
in VERTEX
{
    vec3 norm;
    vec2 tex_coord;
    vec3 color;
} vertex;

out vec4 frag_color;

uniform vec3 object_col;
uniform int width;
uniform int height;
layout (binding = 0) uniform sampler2D color_map;
layout (binding = 1) uniform sampler2D height_map;

float texel_height(ivec2 texel)
{
    texel.x = clamp(texel.x, 0, width - 1);
    texel.y = clamp(texel.y, 0, height - 1);
    return texelFetch(height_map, texel, 0).r;
}

void main()
{
    // Calculate deformed terrain normals using the finite difference method
    /*ivec2 itex_coord = ivec2(tex_coord.x * width, tex_coord.y * height);
    float h_right = texel_height(itex_coord + ivec2(1, 0));
    float h_left = texel_height(itex_coord + ivec2(-1, 0));
    float h_top = texel_height(itex_coord + ivec2(0, 1));
    float h_bot = texel_height(itex_coord + ivec2(0, -1));
    float offset = 1.0 / width;
    vec3 terrain_norm = vec3(h_left - h_right, offset * 2, h_bot - h_top);
    terrain_norm = normalize(terrain_norm);

    vec2 offset = 1.0 / vec2(width, height);
    vec2 half_offset = 0.5 * offset;
    float h_right = texture(height_map, tex_coord + vec2(half_offset.x, 0)).r;
    float h_left = texture(height_map, tex_coord + vec2(-half_offset.x, 0)).r;
    float h_top = texture(height_map, tex_coord + vec2(0, half_offset.y)).r;
    float h_bot = texture(height_map, tex_coord + vec2(0, -half_offset.y)).r;
    vec3 terrain_norm = vec3(h_left - h_right, offset.x, h_bot - h_top);
    terrain_norm = normalize(terrain_norm);*/

    if (vertex.color == vec3(0))
        frag_color = texture(color_map, vertex.tex_coord);
    else
        frag_color = vec4(vertex.color, 1);
}